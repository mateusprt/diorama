cmake_minimum_required(VERSION 3.10)
project(CGCCHIB)

# Define o padrão do C++
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Ativa o FetchContent
include(FetchContent)

# Configura o FetchContent para baixar e compilar GLFW automaticamente
FetchContent_Declare(
  glfw
  GIT_REPOSITORY https://github.com/glfw/glfw.git
  GIT_TAG 3.4  # Define a versão desejada da GLFW
)

# Faz o download e compila a GLFW
FetchContent_MakeAvailable(glfw)

# Adiciona as pastas de cabeçalhos
include_directories(${CMAKE_SOURCE_DIR}/dependencies)
include_directories(${CMAKE_SOURCE_DIR}/dependencies/glad)
include_directories(${CMAKE_SOURCE_DIR}/dependencies/glm)
include_directories(${CMAKE_SOURCE_DIR}/dependencies/stb_image)
include_directories(${CMAKE_SOURCE_DIR}/common)
include_directories(${CMAKE_SOURCE_DIR}/common/shader)
include_directories(${CMAKE_SOURCE_DIR}/src/include/graphics)
include_directories(${CMAKE_SOURCE_DIR}/src/include/scene)

# Projeto
set(EXERCISES
    main
)

add_compile_options(-Wno-pragmas)

# Loop para criar um executável para cada exercício
foreach(EXERCISE ${EXERCISES})
    add_executable(
      ${EXERCISE} 
      src/graphics/texture.cpp
      src/graphics/material.cpp
      src/scene/object.cpp
      src/scene/camera.cpp
      src/${EXERCISE}.cpp
      common/glad.c
      common/Shader.cpp
      dependencies/stb_image/stb_image.cpp
    )
    target_link_libraries(${EXERCISE} glfw opengl32)
endforeach()
